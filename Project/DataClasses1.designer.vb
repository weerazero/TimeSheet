'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DB-Timesheet")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertaccount(instance As account)
    End Sub
  Partial Private Sub Updateaccount(instance As account)
    End Sub
  Partial Private Sub Deleteaccount(instance As account)
    End Sub
  Partial Private Sub Insertactivity(instance As activity)
    End Sub
  Partial Private Sub Updateactivity(instance As activity)
    End Sub
  Partial Private Sub Deleteactivity(instance As activity)
    End Sub
  Partial Private Sub Insertproject(instance As project)
    End Sub
  Partial Private Sub Updateproject(instance As project)
    End Sub
  Partial Private Sub Deleteproject(instance As project)
    End Sub
  Partial Private Sub Inserttimesheet(instance As timesheet)
    End Sub
  Partial Private Sub Updatetimesheet(instance As timesheet)
    End Sub
  Partial Private Sub Deletetimesheet(instance As timesheet)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Project.My.MySettings.Default.DB_TimesheetConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property accounts() As System.Data.Linq.Table(Of account)
		Get
			Return Me.GetTable(Of account)
		End Get
	End Property
	
	Public ReadOnly Property activities() As System.Data.Linq.Table(Of activity)
		Get
			Return Me.GetTable(Of activity)
		End Get
	End Property
	
	Public ReadOnly Property projects() As System.Data.Linq.Table(Of project)
		Get
			Return Me.GetTable(Of project)
		End Get
	End Property
	
	Public ReadOnly Property timesheets() As System.Data.Linq.Table(Of timesheet)
		Get
			Return Me.GetTable(Of timesheet)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.account")>  _
Partial Public Class account
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _f_name As String
	
	Private _l_name As String
	
	Private _email As String
	
	Private _password As String
	
	Private _status_manager As String
	
	Private _manager_id As String
	
	Private _projects As EntitySet(Of project)
	
	Private _timesheet As EntityRef(Of timesheet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onf_nameChanging(value As String)
    End Sub
    Partial Private Sub Onf_nameChanged()
    End Sub
    Partial Private Sub Onl_nameChanging(value As String)
    End Sub
    Partial Private Sub Onl_nameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub Onstatus_managerChanging(value As String)
    End Sub
    Partial Private Sub Onstatus_managerChanged()
    End Sub
    Partial Private Sub Onmanager_idChanging(value As String)
    End Sub
    Partial Private Sub Onmanager_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projects = New EntitySet(Of project)(AddressOf Me.attach_projects, AddressOf Me.detach_projects)
		Me._timesheet = CType(Nothing, EntityRef(Of timesheet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_f_name", DbType:="NVarChar(255)")>  _
	Public Property f_name() As String
		Get
			Return Me._f_name
		End Get
		Set
			If (String.Equals(Me._f_name, value) = false) Then
				Me.Onf_nameChanging(value)
				Me.SendPropertyChanging
				Me._f_name = value
				Me.SendPropertyChanged("f_name")
				Me.Onf_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_l_name", DbType:="NVarChar(255)")>  _
	Public Property l_name() As String
		Get
			Return Me._l_name
		End Get
		Set
			If (String.Equals(Me._l_name, value) = false) Then
				Me.Onl_nameChanging(value)
				Me.SendPropertyChanging
				Me._l_name = value
				Me.SendPropertyChanged("l_name")
				Me.Onl_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(255)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="NVarChar(255)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_manager", DbType:="NVarChar(255)")>  _
	Public Property status_manager() As String
		Get
			Return Me._status_manager
		End Get
		Set
			If (String.Equals(Me._status_manager, value) = false) Then
				Me.Onstatus_managerChanging(value)
				Me.SendPropertyChanging
				Me._status_manager = value
				Me.SendPropertyChanged("status_manager")
				Me.Onstatus_managerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manager_id", DbType:="NVarChar(255)")>  _
	Public Property manager_id() As String
		Get
			Return Me._manager_id
		End Get
		Set
			If (String.Equals(Me._manager_id, value) = false) Then
				Me.Onmanager_idChanging(value)
				Me.SendPropertyChanging
				Me._manager_id = value
				Me.SendPropertyChanged("manager_id")
				Me.Onmanager_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="account_project", Storage:="_projects", ThisKey:="manager_id", OtherKey:="manager_id")>  _
	Public Property projects() As EntitySet(Of project)
		Get
			Return Me._projects
		End Get
		Set
			Me._projects.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="account_timesheet", Storage:="_timesheet", ThisKey:="id", OtherKey:="employee_id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property timesheet() As timesheet
		Get
			Return Me._timesheet.Entity
		End Get
		Set
			Dim previousValue As timesheet = Me._timesheet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._timesheet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._timesheet.Entity = Nothing
					previousValue.account = Nothing
				End If
				Me._timesheet.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.account = Me
				End If
				Me.SendPropertyChanged("timesheet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_projects(ByVal entity As project)
		Me.SendPropertyChanging
		entity.account = Me
	End Sub
	
	Private Sub detach_projects(ByVal entity As project)
		Me.SendPropertyChanging
		entity.account = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.activity")>  _
Partial Public Class activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _project_id As String
	
	Private _activity_id As String
	
	Private _project As EntityRef(Of project)
	
	Private _timesheet As EntityRef(Of timesheet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onproject_idChanging(value As String)
    End Sub
    Partial Private Sub Onproject_idChanged()
    End Sub
    Partial Private Sub Onactivity_idChanging(value As String)
    End Sub
    Partial Private Sub Onactivity_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._project = CType(Nothing, EntityRef(Of project))
		Me._timesheet = CType(Nothing, EntityRef(Of timesheet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_project_id", DbType:="NVarChar(255)")>  _
	Public Property project_id() As String
		Get
			Return Me._project_id
		End Get
		Set
			If (String.Equals(Me._project_id, value) = false) Then
				If Me._project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onproject_idChanging(value)
				Me.SendPropertyChanging
				Me._project_id = value
				Me.SendPropertyChanged("project_id")
				Me.Onproject_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_id", DbType:="NVarChar(255)")>  _
	Public Property activity_id() As String
		Get
			Return Me._activity_id
		End Get
		Set
			If (String.Equals(Me._activity_id, value) = false) Then
				If Me._timesheet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onactivity_idChanging(value)
				Me.SendPropertyChanging
				Me._activity_id = value
				Me.SendPropertyChanged("activity_id")
				Me.Onactivity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="project_activity", Storage:="_project", ThisKey:="project_id", OtherKey:="project_code", IsForeignKey:=true)>  _
	Public Property project() As project
		Get
			Return Me._project.Entity
		End Get
		Set
			Dim previousValue As project = Me._project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._project.Entity = Nothing
					previousValue.activities.Remove(Me)
				End If
				Me._project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.activities.Add(Me)
					Me._project_id = value.project_code
				Else
					Me._project_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("project")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="timesheet_activity", Storage:="_timesheet", ThisKey:="activity_id", OtherKey:="activity_id", IsForeignKey:=true)>  _
	Public Property timesheet() As timesheet
		Get
			Return Me._timesheet.Entity
		End Get
		Set
			Dim previousValue As timesheet = Me._timesheet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._timesheet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._timesheet.Entity = Nothing
					previousValue.activities.Remove(Me)
				End If
				Me._timesheet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.activities.Add(Me)
					Me._activity_id = value.activity_id
				Else
					Me._activity_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("timesheet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.project")>  _
Partial Public Class project
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _project_code As String
	
	Private _name As String
	
	Private _manager_id As String
	
	Private _start_date As System.Nullable(Of Date)
	
	Private _end_date As System.Nullable(Of Date)
	
	Private _activities As EntitySet(Of activity)
	
	Private _account As EntityRef(Of account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onproject_codeChanging(value As String)
    End Sub
    Partial Private Sub Onproject_codeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onmanager_idChanging(value As String)
    End Sub
    Partial Private Sub Onmanager_idChanged()
    End Sub
    Partial Private Sub Onstart_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onstart_dateChanged()
    End Sub
    Partial Private Sub Onend_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onend_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._activities = New EntitySet(Of activity)(AddressOf Me.attach_activities, AddressOf Me.detach_activities)
		Me._account = CType(Nothing, EntityRef(Of account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_project_code", DbType:="NVarChar(255)")>  _
	Public Property project_code() As String
		Get
			Return Me._project_code
		End Get
		Set
			If (String.Equals(Me._project_code, value) = false) Then
				Me.Onproject_codeChanging(value)
				Me.SendPropertyChanging
				Me._project_code = value
				Me.SendPropertyChanged("project_code")
				Me.Onproject_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(255)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manager_id", DbType:="NVarChar(255)")>  _
	Public Property manager_id() As String
		Get
			Return Me._manager_id
		End Get
		Set
			If (String.Equals(Me._manager_id, value) = false) Then
				If Me._account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onmanager_idChanging(value)
				Me.SendPropertyChanging
				Me._manager_id = value
				Me.SendPropertyChanged("manager_id")
				Me.Onmanager_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_start_date", DbType:="DateTime")>  _
	Public Property start_date() As System.Nullable(Of Date)
		Get
			Return Me._start_date
		End Get
		Set
			If (Me._start_date.Equals(value) = false) Then
				Me.Onstart_dateChanging(value)
				Me.SendPropertyChanging
				Me._start_date = value
				Me.SendPropertyChanged("start_date")
				Me.Onstart_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_end_date", DbType:="DateTime")>  _
	Public Property end_date() As System.Nullable(Of Date)
		Get
			Return Me._end_date
		End Get
		Set
			If (Me._end_date.Equals(value) = false) Then
				Me.Onend_dateChanging(value)
				Me.SendPropertyChanging
				Me._end_date = value
				Me.SendPropertyChanged("end_date")
				Me.Onend_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="project_activity", Storage:="_activities", ThisKey:="project_code", OtherKey:="project_id")>  _
	Public Property activities() As EntitySet(Of activity)
		Get
			Return Me._activities
		End Get
		Set
			Me._activities.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="account_project", Storage:="_account", ThisKey:="manager_id", OtherKey:="manager_id", IsForeignKey:=true)>  _
	Public Property account() As account
		Get
			Return Me._account.Entity
		End Get
		Set
			Dim previousValue As account = Me._account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._account.Entity = Nothing
					previousValue.projects.Remove(Me)
				End If
				Me._account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.projects.Add(Me)
					Me._manager_id = value.manager_id
				Else
					Me._manager_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_activities(ByVal entity As activity)
		Me.SendPropertyChanging
		entity.project = Me
	End Sub
	
	Private Sub detach_activities(ByVal entity As activity)
		Me.SendPropertyChanging
		entity.project = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.timesheet")>  _
Partial Public Class timesheet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _employee_id As String
	
	Private _time_from As System.Nullable(Of Date)
	
	Private _time_to As System.Nullable(Of Date)
	
	Private _comment As String
	
	Private _activity_id As String
	
	Private _activities As EntitySet(Of activity)
	
	Private _account As EntityRef(Of account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onemployee_idChanging(value As String)
    End Sub
    Partial Private Sub Onemployee_idChanged()
    End Sub
    Partial Private Sub Ontime_fromChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ontime_fromChanged()
    End Sub
    Partial Private Sub Ontime_toChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ontime_toChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Onactivity_idChanging(value As String)
    End Sub
    Partial Private Sub Onactivity_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._activities = New EntitySet(Of activity)(AddressOf Me.attach_activities, AddressOf Me.detach_activities)
		Me._account = CType(Nothing, EntityRef(Of account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				If Me._account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onemployee_idChanging(value)
				Me.SendPropertyChanging
				Me._employee_id = value
				Me.SendPropertyChanged("employee_id")
				Me.Onemployee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time_from", DbType:="DateTime")>  _
	Public Property time_from() As System.Nullable(Of Date)
		Get
			Return Me._time_from
		End Get
		Set
			If (Me._time_from.Equals(value) = false) Then
				Me.Ontime_fromChanging(value)
				Me.SendPropertyChanging
				Me._time_from = value
				Me.SendPropertyChanged("time_from")
				Me.Ontime_fromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time_to", DbType:="DateTime")>  _
	Public Property time_to() As System.Nullable(Of Date)
		Get
			Return Me._time_to
		End Get
		Set
			If (Me._time_to.Equals(value) = false) Then
				Me.Ontime_toChanging(value)
				Me.SendPropertyChanging
				Me._time_to = value
				Me.SendPropertyChanged("time_to")
				Me.Ontime_toChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="NVarChar(255)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_id", DbType:="NVarChar(255)")>  _
	Public Property activity_id() As String
		Get
			Return Me._activity_id
		End Get
		Set
			If (String.Equals(Me._activity_id, value) = false) Then
				Me.Onactivity_idChanging(value)
				Me.SendPropertyChanging
				Me._activity_id = value
				Me.SendPropertyChanged("activity_id")
				Me.Onactivity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="timesheet_activity", Storage:="_activities", ThisKey:="activity_id", OtherKey:="activity_id")>  _
	Public Property activities() As EntitySet(Of activity)
		Get
			Return Me._activities
		End Get
		Set
			Me._activities.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="account_timesheet", Storage:="_account", ThisKey:="employee_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property account() As account
		Get
			Return Me._account.Entity
		End Get
		Set
			Dim previousValue As account = Me._account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._account.Entity = Nothing
					previousValue.timesheet = Nothing
				End If
				Me._account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.timesheet = Me
					Me._employee_id = value.id
				Else
					Me._employee_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_activities(ByVal entity As activity)
		Me.SendPropertyChanging
		entity.timesheet = Me
	End Sub
	
	Private Sub detach_activities(ByVal entity As activity)
		Me.SendPropertyChanging
		entity.timesheet = Nothing
	End Sub
End Class
